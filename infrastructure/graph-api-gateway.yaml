AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway for Graph Tool Lambda - Direct Access'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name

Resources:
  # REST API
  GraphAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'cc-graph-api-${Environment}'
      Description: Direct API access to graph-tool Lambda
      EndpointConfiguration:
        Types:
          - REGIONAL

  # /graph resource
  GraphResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GraphAPI
      ParentId: !GetAtt GraphAPI.RootResourceId
      PathPart: graph

  # POST /graph method
  GraphPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GraphAPI
      ResourceId: !Ref GraphResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cc-graph-tool-${Environment}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # OPTIONS /graph for CORS
  GraphOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GraphAPI
      ResourceId: !Ref GraphResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda permission for API Gateway
  GraphLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub 'cc-graph-tool-${Environment}'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GraphAPI}/*/*/*'

  # Deployment
  GraphAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GraphPostMethod
      - GraphOptionsMethod
    Properties:
      RestApiId: !Ref GraphAPI
      StageName: !Ref Environment

Outputs:
  GraphAPIUrl:
    Description: URL of the Graph API
    Value: !Sub 'https://${GraphAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/graph'
    Export:
      Name: !Sub '${AWS::StackName}-GraphAPIUrl'

  GraphAPIId:
    Description: API Gateway ID
    Value: !Ref GraphAPI
    Export:
      Name: !Sub '${AWS::StackName}-GraphAPIId'
